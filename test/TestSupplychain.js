// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')
const truffleAssert = require('truffle-assertions');

contract('SupplyChain', function(accounts) {
    let supplyChain;
    beforeEach(async ()=> {
        supplyChain = await SupplyChain.deployed();
    });


    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originDesignerID = accounts[1]
    const originDesignerName = "Daniel Fragoso"
    const designerInformation = "Prestigious Dress Designer"
    const designerLocation = "Mexico City"
    var dressID = sku + upc
    const desigNotes = "Red dress for party events"
    const dressPrice = web3.utils.toWei("1", "ether")
    var itemState = 0
    const userID = accounts[2]
    const courierID = accounts[3]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Designer: accounts[1] ", accounts[1])
    console.log("User: accounts[2] ", accounts[2])
    console.log("Courier: accounts[3] ", accounts[3])

    // 1st Test
    it("Testing smart contract function requestItem() that allows a dress buyer to request a design", async() => {

        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Mark an item as Requested by calling function harvestItem()
        let result = await supplyChain.requestItem(upc, originDesignerID, originDesignerName, designerInformation, designerLocation, desigNotes)

         // Watch the emitted event Requested()
        truffleAssert.eventEmitted(result, 'Requested', (ev) => {
            eventEmitted = true
            return true;
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originDesignerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originDesignerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originDesignerName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], designerInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], designerLocation, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })

    // 2nd Test
    it("Testing smart contract function reviewItem() that allows a designer to review a dress design request", async() => {
        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Mark an item as Reviewed by calling function reviewItem()
        let result = await supplyChain.reviewItem(upc, {from: originDesignerID});

        // Watch the emitted event Reviewed()
        truffleAssert.eventEmitted(result, 'Reviewed', (ev) => {
            eventEmitted = true
            return true;
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[4], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })    

    // 3rd Test
    it("Testing smart contract function confirmDesign() that allows a user to confirm design", async() => {
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Mark an item as Confirmed by calling function confirmDesign()
        await supplyChain.addDressBuyer(userID);
        let result = await supplyChain.confirmDesign(upc, {from: userID});
        
        // Watch the emitted event Confirmed()
        truffleAssert.eventEmitted(result, 'Confirmed', (ev) => {
            eventEmitted = true
            return true;
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[4], 2, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[5], userID, 'Error: Invalid item userID'); 
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })    

    // 4th Test
    it("Testing smart contract function completeDesign() that allows a designer to mark this design as complete", async() => {
        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Mark an item as Completed by calling function completeDesign()
        let result = await supplyChain.completeDesign(upc, dressPrice, {from: originDesignerID});

        // Watch the emitted event Completed()
        truffleAssert.eventEmitted(result, 'Completed', (ev) => {
            eventEmitted = true
            return true;
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[3], dressPrice, 'Error: Invalid item Price');
        assert.equal(resultBufferTwo[4], 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a user to pay for the design", async() => {
        // Declare and Initialize a variable for event
        var eventEmitted = false;  

        // Mark an item as Paid by calling function buyItem()
        let result = await supplyChain.buyDress(upc, {from: userID, value: dressPrice});
        
        // Watch the emitted event Completed()
        truffleAssert.eventEmitted(result, 'Paid', (ev) => {
            eventEmitted = true
            return true;
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
       
        // Verify the result set
        assert.equal(resultBufferOne[2], userID, 'Error: Invalid item Owner');
        assert.equal(resultBufferTwo[3], dressPrice, 'Error: Invalid dress Price');
        assert.equal(resultBufferTwo[4], 4, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
    })    
    

    // 6th Test
    it("Testing smart contract function shipDress() that allows a courier to ship the dress", async() => {
        // Declare and Initialize a variable for event
        var eventEmitted = false;  

        // Mark an item as Shipped by calling function shipDress()
        await supplyChain.addDressCourier(courierID);
        let result = await supplyChain.shipDress(upc, {from: courierID});

        // Watch the emitted event Shipped()
        truffleAssert.eventEmitted(result, 'Shipped', (ev) => {
            eventEmitted = true
            return true;
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
       

        // Verify the result set
        assert.equal(resultBufferTwo[6], courierID, 'Error: Invalid item courierID');
        assert.equal(resultBufferTwo[5], userID, 'Error: Invalid item userID');
        assert.equal(resultBufferTwo[4], 5, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted')         
    })    
 
    // 7th Test
    it("Testing smart contract function deliverDress() that allows a courier to mark dress as delivered", async() => {
        // Declare and Initialize a variable for event
        var eventEmitted = false;  

        // Mark an item as Delivered by calling function shipDress()
        let result = await supplyChain.deliverDress(upc, {from: courierID});

        // Watch the emitted event Shipped()
        truffleAssert.eventEmitted(result, 'Delivered', (ev) => {
            eventEmitted = true
            return true;
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
       

        // Verify the result set
        assert.equal(resultBufferTwo[6], courierID, 'Error: Invalid item courierID');
        assert.equal(resultBufferTwo[5], userID, 'Error: Invalid item userID');
        assert.equal(resultBufferTwo[4], 6, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted')     
             
    })    

    // 8th Test
    it("Testing smart contract function receiveItem() that allows a user to notify that has received the dress", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;  

        // Mark an item as Received by calling function shipDress()
        let result = await supplyChain.receiveItem(upc, {from: userID});

        // Watch the emitted event Received()
        truffleAssert.eventEmitted(result, 'Received', (ev) => {
            eventEmitted = true
            return true;
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
       

        // Verify the result set
        assert.equal(resultBufferOne[2], userID, 'Error: Invalid item Owner');
        assert.equal(resultBufferTwo[5], userID, 'Error: Invalid item userID');
        assert.equal(resultBufferTwo[4], 7, 'Error: Invalid item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted')   
        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], userID, 'Error: Invalid item ownerID');
        assert.equal(resultBufferOne[3], originDesignerID, 'Error: Invalid item originDesignerID');
        assert.equal(resultBufferOne[4], originDesignerName, 'Error: Invalid item originDesignerName');
        assert.equal(resultBufferOne[5], designerInformation, 'Error: Invalid item designerInformation');
        assert.equal(resultBufferOne[6], designerLocation, 'Error: Invalid item designerLocation');
        assert.equal(resultBufferOne[7], dressID, 'Error: Invalid item dressID');
        
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        
        // Verify the result set:

        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferTwo[2], desigNotes, 'Error: Invalid item desigNotes');
        assert.equal(resultBufferTwo[3], dressPrice, 'Error: Invalid item dressPrice');
        assert.equal(resultBufferTwo[4], 7, 'Error: Invalid item dressState');
        assert.equal(resultBufferTwo[5], userID, 'Error: Invalid item userID');
        assert.equal(resultBufferTwo[6], courierID, 'Error: Invalid item courierID');
    })
});

